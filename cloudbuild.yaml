steps:
  # Build the Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${_GCP_PROJECT_ID}/${_REPO_NAME}/${_REPO_NAME}:v0.2.33', '.']
    dir: '.'
  
  # Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${_GCP_PROJECT_ID}/${_REPO_NAME}/${_REPO_NAME}:v0.2.33']

  # Deploy the image to Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'us-central1-docker.pkg.dev/${_GCP_PROJECT_ID}/${_REPO_NAME}/${_REPO_NAME}:v0.2.33'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--add-cloudsql-instances'
      - '${_CLOUD_SQL_CONNECTION_NAME}' # Include the Cloud SQL instance
      - '--set-env-vars' # Include the DB env vars
      - >-
        CLOUD_SQL_CONNECTION_NAME=${_CLOUD_SQL_CONNECTION_NAME},
        DB_USER=${_DB_USER},
        DB_NAME=${_DB_NAME}

  # Delete existing files in the Cloud Storage bucket
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'gsutil'
    args: ['-m', 'rm', 'gs://${_FRONTEND_BUCKET}/**']

  # Upload new frontend files to Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'gsutil'
    args: ['-m', 'cp', '-r', 'frontend/public/*', 'gs://${_FRONTEND_BUCKET}']

substitutions:
  _GCP_PROJECT_ID: 'noted-reef-387021'
  _REPO_NAME: 'cloud-run-source-deploy'
  _SERVICE_NAME: 'mickeyf-org'
  _REGION: 'us-central1'
  _FRONTEND_BUCKET: 'www.mickeyf.org'
  _CLOUD_SQL_CONNECTION_NAME: 'noted-reef-387021:us-central1:cms-mickeyf'
  _DB_USER: 'cms_mickeyf'
  _DB_NAME: 'cms'

options:
  logging: CLOUD_LOGGING_ONLY