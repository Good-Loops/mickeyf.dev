/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/fft.js/lib/fft.js":
/*!****************************************!*\
  !*** ./node_modules/fft.js/lib/fft.js ***!
  \****************************************/
/***/ ((module) => {

eval("\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n\n//# sourceURL=webpack://frontend/./node_modules/fft.js/lib/fft.js?");

/***/ }),

/***/ "./public/src/circleAnim.ts":
/*!**********************************!*\
  !*** ./public/src/circleAnim.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRandomInt = exports.CANVAS_HEIGHT = exports.CANVAS_WIDTH = void 0;\nconst ColorHandler = __importStar(__webpack_require__(/*! ./handlers/colorHandler */ \"./public/src/handlers/colorHandler.ts\"));\nconst CircleHandler = __importStar(__webpack_require__(/*! ./handlers/circleHandler */ \"./public/src/handlers/circleHandler.ts\"));\nconst PositionHandler = __importStar(__webpack_require__(/*! ./handlers/positionHandler */ \"./public/src/handlers/positionHandler.ts\"));\nconst AudioHandler = __importStar(__webpack_require__(/*! ./handlers/audioHandler */ \"./public/src/handlers/audioHandler.ts\"));\n// Canvas width and height\nconst canvas = document.getElementById(\"dancing-circles\");\ncanvas.width = 1920;\ncanvas.height = 1080;\nexports.CANVAS_WIDTH = canvas.width;\nexports.CANVAS_HEIGHT = canvas.height;\n// Returns random integer between a minimum and a maximum\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexports.getRandomInt = getRandomInt;\n// Create animation loop\nconst animationLoop = function () {\n    const ctx = canvas.getContext(\"2d\");\n    let stop = false;\n    // Canvas\n    let canvasTargetColor;\n    let canvasBgColor;\n    // Saturation\n    const canvasMinS = 65;\n    const canvasMaxS = 75;\n    // Lightness\n    const canvasMinL = 40;\n    const canvasMaxL = 60;\n    // Circle variable and array\n    let circ;\n    let circArr = [];\n    let cArrLen = 6;\n    // Fills circle array\n    // Defines starting random bg-color for canvas\n    function load() {\n        canvas.style.backgroundColor = ColorHandler.randomColor(canvasMinS, canvasMaxS, canvasMinL, canvasMaxL, true);\n        canvasBgColor = ColorHandler.convertRGBtoHSL(canvas.style.backgroundColor);\n        canvasTargetColor = ColorHandler.randomColor(canvasMinS, canvasMaxS, canvasMinL, canvasMaxL, true);\n        // Radius Growth Pattern\n        let prevR = 1.5;\n        let currentR = 15;\n        let adjustR = 0.5;\n        for (let i = 0; i < cArrLen; i++) {\n            currentR += prevR * adjustR;\n            prevR = currentR;\n            circ = new CircleHandler.Circle(currentR, PositionHandler.getRandomX(currentR), PositionHandler.getRandomY(currentR), PositionHandler.getRandomX(currentR), PositionHandler.getRandomY(currentR), ColorHandler.randomColor(CircleHandler.minS, CircleHandler.maxS, CircleHandler.minL, CircleHandler.maxL, true), ColorHandler.randomColor(CircleHandler.minS, CircleHandler.maxS, CircleHandler.minL, CircleHandler.maxL, true), 0, 2 * Math.PI, false);\n            circArr.push(circ);\n        }\n    }\n    // Updates circles\n    function update() {\n        canvasTargetColor = ColorHandler.randomColor(canvasMinS, canvasMaxS, canvasMinL, canvasMaxL, true);\n        // Get a random index of the circArr array\n        const randomIndex = Math.floor(Math.random() * circArr.length);\n        // Get circle at random index\n        circ = circArr[randomIndex];\n        if (AudioHandler.playing) {\n            console.log(AudioHandler.pitch + \"Hz\");\n            // if(AudioHandler.clarity < 85) {\n            // }\n        }\n        else {\n            // Update circle properties\n            circ.targetColor = ColorHandler.randomColor(CircleHandler.minS, CircleHandler.maxS, CircleHandler.minL, CircleHandler.maxL, true);\n        }\n        circ.targetX = PositionHandler.getRandomX(circ.r);\n        circ.targetY = PositionHandler.getRandomY(circ.r);\n        // Replace the circle in the array with the updated circle\n        circArr[randomIndex] = circ;\n    }\n    // Stops animation if key is pressed\n    function stopAnimation(event) {\n        if (event.code === \"ArrowUp\") {\n            stop = true;\n        }\n    }\n    // Add the event listener for stopping the animation\n    document.addEventListener(\"keydown\", stopAnimation);\n    function draw() {\n        // Clear canvas\n        ctx.clearRect(0, 0, exports.CANVAS_WIDTH, exports.CANVAS_HEIGHT);\n        canvas.style.backgroundColor = ColorHandler.lerpColor(canvasBgColor, canvasTargetColor, 0.02);\n        canvasBgColor = ColorHandler.convertRGBtoHSL(canvas.style.backgroundColor);\n        // Sort circles in order of increasing radius\n        circArr.sort((a, b) => b.r - a.r);\n        // Draw circles\n        circArr.forEach(function (elem) {\n            elem.lerpPosition(true); // Lerp X\n            elem.lerpPosition(false); // Lerp Y\n            if (elem.color[0] === \"h\" && elem.targetColor[0] === \"h\") {\n                elem.lerpColor();\n            }\n            else if (elem.color[0] === \"r\" && elem.targetColor[0] === \"r\") {\n                elem.convColor(false, true); // Convert to HSL\n                elem.convColor(true, true); // Convert to HSL\n                elem.lerpColor();\n                elem.convColor(true, false); // Convert to RGB\n            }\n            else {\n                console.log(elem.color[0]);\n                throw new Error(\"Browser Not Compatible\");\n            }\n            ctx.beginPath();\n            ctx.fillStyle = ColorHandler.convertHSLtoHSLA(elem.color, .7);\n            ctx.arc(elem.x, elem.y, elem.r, elem.startAngle, elem.endAngle, elem.counterclockwise);\n            ctx.fill();\n        });\n    }\n    load();\n    // This function will be called\n    // repeatedly\n    let frameCount = 0;\n    function step() {\n        if (stop)\n            return;\n        frameCount++;\n        // Called every 60 frames (1 sec)\n        if (frameCount % 60 === 0)\n            update();\n        // Called every 5 frames (0.083 sec)\n        if (frameCount % 5 === 0)\n            draw();\n    }\n    // 90fps\n    setInterval(step, 1000 / 90);\n};\nanimationLoop();\n\n\n//# sourceURL=webpack://frontend/./public/src/circleAnim.ts?");

/***/ }),

/***/ "./public/src/handlers/audioHandler.ts":
/*!*********************************************!*\
  !*** ./public/src/handlers/audioHandler.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.playing = exports.clarity = exports.pitch = void 0;\nconst pitchy_1 = __webpack_require__(/*! pitchy */ \"./node_modules/pitchy/index.js\");\nconst fileInput = document.getElementById(\"file-upload\");\nconst uploadButton = document.getElementById(\"upload-button\");\nlet pitch, clarity, playing;\nexports.pitch = pitch;\nexports.clarity = clarity;\nexports.playing = playing;\n// Mess with smoothingTimeConstant, Float64Array and fftSize\nfileInput.addEventListener(\"input\", function () {\n    // add \"playing\" class to button when audio starts playing\n    uploadButton.classList.add(\"playing\");\n    // Disable the file input element while the audio is playing\n    fileInput.disabled = true;\n    uploadButton.style.cursor = \"url('./assets/img/notallowed.cur'), auto\";\n    const files = fileInput.files;\n    const file = files[0];\n    const music = new Audio(URL.createObjectURL(file));\n    function getCurrentPitch(analyserNode, detector, input, sampleRate) {\n        var _a;\n        analyserNode.getFloatTimeDomainData(input);\n        _a = detector.findPitch(input, sampleRate), exports.pitch = pitch = _a[0], exports.clarity = clarity = _a[1];\n        exports.pitch = pitch = Math.round(pitch * 10) / 10;\n        exports.clarity = clarity = Math.round(clarity * 100);\n        if (music.ended) {\n            exports.playing = playing = false;\n            // Re-enable the file input element after the audio has finished playing\n            fileInput.disabled = false;\n            uploadButton.style.cursor = \"url('./assets/img/select.cur'), auto\";\n            uploadButton.classList.remove(\"playing\");\n            fileInput.value = \"\";\n            return;\n        }\n        window.setTimeout(() => getCurrentPitch(analyserNode, detector, input, sampleRate), 1000 / 60);\n    }\n    // Create Audio Context\n    const audioContext = new window.AudioContext;\n    // Create Analyser Node\n    const analyser = audioContext.createAnalyser();\n    // Connect audio element to analyser\n    audioContext.createMediaElementSource(music).connect(analyser);\n    // Connect analyser to destination\n    analyser.connect(audioContext.destination);\n    music.load();\n    music.play();\n    exports.playing = playing = true;\n    const detector = pitchy_1.PitchDetector.forFloat32Array(analyser.fftSize);\n    const input = new Float32Array(detector.inputLength);\n    getCurrentPitch(analyser, detector, input, audioContext.sampleRate);\n});\n\n\n//# sourceURL=webpack://frontend/./public/src/handlers/audioHandler.ts?");

/***/ }),

/***/ "./public/src/handlers/circleHandler.ts":
/*!**********************************************!*\
  !*** ./public/src/handlers/circleHandler.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.maxL = exports.minL = exports.maxS = exports.minS = exports.Circle = void 0;\nconst ColorHandler = __importStar(__webpack_require__(/*! ./colorHandler */ \"./public/src/handlers/colorHandler.ts\"));\nconst positionHandler_1 = __webpack_require__(/*! ./positionHandler */ \"./public/src/handlers/positionHandler.ts\");\nclass Circle {\n    constructor(r, x, y, tX, tY, color, tColor, sAngle, eAngle, ccwise) {\n        this.r = r;\n        this.x = x;\n        this.y = y;\n        this.targetX = tX;\n        this.targetY = tY;\n        this.color = color;\n        this.targetColor = tColor;\n        this.startAngle = sAngle;\n        this.endAngle = eAngle;\n        this.counterclockwise = ccwise;\n    }\n    convColor(isTColor, isRtoH) {\n        const colorToConvert = isTColor ? this.targetColor : this.color;\n        const convertedColor = isRtoH ? ColorHandler.convertRGBtoHSL(colorToConvert) : ColorHandler.convertHSLStrToRGBStr(colorToConvert);\n        if (isTColor) {\n            this.targetColor = convertedColor;\n        }\n        else {\n            this.color = convertedColor;\n        }\n    }\n    lerpColor() {\n        this.color = ColorHandler.lerpColor(this.color, this.targetColor, 0.05);\n    }\n    lerpPosition(isX) {\n        const t = 0.01;\n        const axis = isX ? this.x : this.y;\n        const tAxis = isX ? this.targetX : this.targetY;\n        const position = (0, positionHandler_1.lerpPosition)(axis, tAxis, t);\n        if (isX) {\n            this.x = position;\n        }\n        else {\n            this.y = position;\n        }\n    }\n}\nexports.Circle = Circle;\n// Saturation\nconst minS = 95;\nexports.minS = minS;\nconst maxS = 100;\nexports.maxS = maxS;\n// Lightness\nconst minL = 50;\nexports.minL = minL;\nconst maxL = 70;\nexports.maxL = maxL;\n\n\n//# sourceURL=webpack://frontend/./public/src/handlers/circleHandler.ts?");

/***/ }),

/***/ "./public/src/handlers/colorHandler.ts":
/*!*********************************************!*\
  !*** ./public/src/handlers/colorHandler.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lerpColor = exports.randomColor = exports.convertRGBtoHSL = exports.convertHSLtoHSLA = exports.convertHSLStrToRGBStr = exports.convertHSLtoRGB = void 0;\nconst circleAnim_1 = __webpack_require__(/*! ../circleAnim */ \"./public/src/circleAnim.ts\");\n// HSL Values to RGB Values\nfunction convertHSLtoRGB(h, s, l) {\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        const hueToRGB = (p, q, t) => {\n            if (t < 0)\n                t += 1;\n            if (t > 1)\n                t -= 1;\n            if (t < 1 / 6)\n                return p + (q - p) * 6 * t;\n            if (t < 1 / 2)\n                return q;\n            if (t < 2 / 3)\n                return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hueToRGB(p, q, h + 1 / 3);\n        g = hueToRGB(p, q, h);\n        b = hueToRGB(p, q, h - 1 / 3);\n    }\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\nexports.convertHSLtoRGB = convertHSLtoRGB;\n// HSL String to RGB String\nfunction convertHSLStrToRGBStr(hslStr) {\n    // Parse the HSL string\n    const hslRegex = /^hsl\\((\\d{1,3}),\\s*(\\d{1,3})%,\\s*(\\d{1,3})%\\)$/i;\n    const match = hslStr.match(hslRegex);\n    if (!match) {\n        console.log(hslStr);\n        throw new Error(\"Invalid HSL string format\");\n    }\n    // Extract and convert HSL values\n    const h = parseInt(match[1], 10) / 360;\n    const s = parseInt(match[2], 10) / 100;\n    const l = parseInt(match[3], 10) / 100;\n    // Convert HSL to RGB\n    const [r, g, b] = convertHSLtoRGB(h, s, l);\n    // Format the RGB values as a string\n    const rgbString = `rgb(${r}, ${g}, ${b})`;\n    return rgbString;\n}\nexports.convertHSLStrToRGBStr = convertHSLStrToRGBStr;\n// HSL String to HSLA String\nfunction convertHSLtoHSLA(hsl, alpha) {\n    return hsl.replace(\"(\", \"a(\").replace(\")\", `, ${alpha})`);\n}\nexports.convertHSLtoHSLA = convertHSLtoHSLA;\n// RGB String to HSL String\nfunction convertRGBtoHSL(rgbString) {\n    // Extract the r, g, b values from the rgb string\n    const rgbArray = rgbString.substring(4, rgbString.length - 1).split(\",\").map(x => parseInt(x.trim()));\n    // Normalize the r, g, b values to range [0, 1]\n    const r = rgbArray[0] / 255;\n    const g = rgbArray[1] / 255;\n    const b = rgbArray[2] / 255;\n    // Find the maximum and minimum values among r, g, b\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    // Calculate the hue\n    let h = 0;\n    if (max === min) {\n        h = 0;\n    }\n    else if (max === r) {\n        h = ((g - b) / (max - min)) % 6;\n        if (h < 0) {\n            h += 6;\n        }\n    }\n    else if (max === g) {\n        h = (b - r) / (max - min) + 2;\n    }\n    else if (max === b) {\n        h = (r - g) / (max - min) + 4;\n    }\n    h = Math.round(h * 60);\n    // Calculate the lightness\n    const l = (max + min) / 2;\n    // Calculate the saturation\n    let s = 0;\n    if (max === min) {\n        s = 0;\n    }\n    else if (l <= 0.5) {\n        s = (max - min) / (max + min);\n    }\n    else {\n        s = (max - min) / (2 - max - min);\n    }\n    s = Math.round(s * 100);\n    // Return the hsl string\n    return `hsl(${h}, ${s}%, ${Math.round(l * 100)}%)`;\n}\nexports.convertRGBtoHSL = convertRGBtoHSL;\n// Get random hsl/rgb value inside chosen spectrum\nfunction randomColor(minS, maxS, minL, maxL, isHsl) {\n    const h = (Math.random() * 360) | 0;\n    const s = (0, circleAnim_1.getRandomInt)(minS, maxS);\n    const l = (0, circleAnim_1.getRandomInt)(minL, maxL);\n    if (isHsl && typeof CSS !== 'undefined' && CSS.supports('color', `hsl(${h}, ${s}%, ${l}%)`)) {\n        return `hsl(${h}, ${s}%, ${l}%)`; // use HSL\n    }\n    else {\n        const [r, g, b] = convertHSLtoRGB(h / 360, s / 100, l / 100);\n        return `rgb(${r}, ${g}, ${b})`; // use RGB fallback\n    }\n}\nexports.randomColor = randomColor;\n// Change color slightly in a pattern\nfunction lerpColor(start, end, t) {\n    // Destructuring assignment \n    const [sH, sS, sL] = start.substring(4, start.length - 1)\n        .split(\",\", 3)\n        .map(val => parseInt(val));\n    const [eH, eS, eL] = end.substring(4, end.length - 1)\n        .split(\",\", 3)\n        .map(val => parseInt(val));\n    const h = sH * (1 - t) + eH * t;\n    const s = sS * (1 - t) + eS * t;\n    const l = sL * (1 - t) + eL * t;\n    if (typeof CSS !== 'undefined' && CSS.supports('color', `hsl(${h}, ${s}%, ${l}%)`)) {\n        return `hsl(${h}, ${s}%, ${l}%)`; // use HSL\n    }\n    else {\n        const [r, g, b] = convertHSLtoRGB(h / 360, s / 100, l / 100);\n        return `rgb(${r}, ${g}, ${b})`; // use RGB fallback\n    }\n}\nexports.lerpColor = lerpColor;\n\n\n//# sourceURL=webpack://frontend/./public/src/handlers/colorHandler.ts?");

/***/ }),

/***/ "./public/src/handlers/positionHandler.ts":
/*!************************************************!*\
  !*** ./public/src/handlers/positionHandler.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lerpPosition = exports.getRandomY = exports.getRandomX = void 0;\nconst circleAnim_1 = __webpack_require__(/*! ../circleAnim */ \"./public/src/circleAnim.ts\");\n// Get random x-coordinate\nfunction getRandomX(radius) {\n    let x = (Math.random() * (circleAnim_1.CANVAS_WIDTH - radius));\n    if (x < radius) {\n        x += radius - x;\n    }\n    return x;\n}\nexports.getRandomX = getRandomX;\n// Get random y-coordinate\nfunction getRandomY(radius) {\n    let y = (Math.random() * (circleAnim_1.CANVAS_HEIGHT - radius));\n    if (y < radius) {\n        y += radius - y;\n    }\n    return y;\n}\nexports.getRandomY = getRandomY;\n// Handles change in position \nfunction lerpPosition(start, end, t) {\n    return start * (1 - t) + end * t;\n}\nexports.lerpPosition = lerpPosition;\n\n\n//# sourceURL=webpack://frontend/./public/src/handlers/positionHandler.ts?");

/***/ }),

/***/ "./node_modules/pitchy/index.js":
/*!**************************************!*\
  !*** ./node_modules/pitchy/index.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Autocorrelator\": () => (/* binding */ Autocorrelator),\n/* harmony export */   \"PitchDetector\": () => (/* binding */ PitchDetector)\n/* harmony export */ });\n/* harmony import */ var fft_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fft.js */ \"./node_modules/fft.js/lib/fft.js\");\n\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nclass Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length)\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length)\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new fft_js__WEBPACK_IMPORTED_MODULE_0__(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nclass PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  // TODO: it might be nice if this were configurable\n  /** @private @readonly */\n  _clarityThreshold = 0.9;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the clarity\n   */\n  findPitch(input, sampleRate) {\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n\n\n//# sourceURL=webpack://frontend/./node_modules/pitchy/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./public/src/circleAnim.ts");
/******/ 	
/******/ })()
;